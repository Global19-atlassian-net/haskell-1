language: generic

services:
- docker

cache:
  directories:
  - $HOME/.stack
  - $TRAVIS_BUILD_DIR/examples/.stack-work
  - $TRAVIS_BUILD_DIR/kubernetes/.stack-work
  - $TRAVIS_BUILD_DIR/kubernetes-client/.stack-work

jobs:
  include:
  - stage: Integration Tests
    install:
    # Download and install stack
    - travis_retry curl -sSL https://get.haskellstack.org/ | sh

    # Download and install kubectl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/

    # Download and install kind
    - curl -LO https://github.com/kubernetes-sigs/kind/releases/download/v0.5.1/kind-linux-amd64 && chmod +x kind-linux-amd64 && sudo mv kind-linux-amd64 /usr/local/bin/kind
    before_script:
    # Create a new Kubernetes cluster using KinD
    - kind create cluster

    # Set KUBECONFIG environment variable
    - export KUBECONFIG="$(kind get kubeconfig-path)"
    script:
    # Verify if kubernetes installation is alright
    - kubectl get pods -A

    # Compile the examples
    - |
      pushd examples \
      && stack build --no-terminal --fast \
      && popd

    # Run simple test
    - |
      pushd examples \
      && stack exec simple \
      && popd

    # Build and load the in-cluster-example image
    - |
      pushd examples \
      && cp "$(stack exec which in-cluster)" in-cluster-example \
      && docker build . -f in-cluster/Dockerfile -t in-cluster-example:latest \
      && kind load docker-image in-cluster-example:latest \
      && popd

    # Wait for kind node to be ready
    - kubectl wait --for=condition=Ready node --all

    # Run the test pod
    - ./examples/in-cluster/run-test.sh
